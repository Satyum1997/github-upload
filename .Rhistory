install.packages(c("jpeg", "Rcurl", "cluster"))
# loading packages
library(jpeg)
require(RCurl)
require(cluster)
#downloading the image, storing the values in dataframe and deleting the downloaded image
z <- tempfile()
url <-"https://personal.utdallas.edu/~pxk180053/YellowFlower-sRGB.jpg"
download.file(url,z,mode="wb")
original <- file.info(z)$size / 1000
pic <- readJPEG(z)
file.remove(z)
rm(z)
dm <- dim(pic)
#converting the image to RGB dataframe
rgbpic <- data.frame(
x=rep(1:dm[2], each=dm[1]),
y=rep(dm[1]:1, dm[2]),
r.value=as.vector(pic[,,1]),
g.value=as.vector(pic[,,2]),
b.value=as.vector(pic[,,3]))
#plotting the image- Note: it may take some time to plot due to big size
plot(y ~ x, data=rgbpic, main="Flower",
col = rgb(rgbpic[c("r.value", "g.value", "b.value")]),
asp = 1, pch = ".")
#storing each cluster data
n1 <- c()
for (i in 1:10) {
cl <- clara(rgbpic[, c("r.value", "g.value", "b.value")], i)
n1[i] <- cl$silinfo$avg.width
}
plot(n1, type = 'l',
main = "Optimal number of clusters for the flower",
xlab = "Number of clusters; k",
ylab = "Average silhouette distance",
col = "blue")
plot(n1, type = 'l',
main = "Optimal number of clusters for the flower",
xlab = "Number of clusters: k",
ylab = "Average silhouette distance",
col = "blue")
# We see that k=3 is the elbow point in the plot.
# therefore we chose no.of clusters, k=3
kColors <- 3
kMeans <- kmeans(rgbpic[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbpic, main="Flower with k means cluster analysis with 3 colors",
col = clusterColour, asp = 1, pch = ".")
require(jpeg)
require(RCurl)
url <-"https://raw.githubusercontent.com/mages/diesunddas/"
url <- paste(url, "master/Blog/LloydsBuilding.jpg", sep="")
readImage <- readJPEG(getURLContent(url, binary=TRUE))
dm <- dim(readImage)
rgbImage <- data.frame(
x=rep(1:dm[2], each=dm[1]),
y=rep(dm[1]:1, dm[2]),
r.value=as.vector(readImage[,,1]),
g.value=as.vector(readImage[,,2]),
b.value=as.vector(readImage[,,3]))
plot(y ~ x, data=rgbImage, main="Lloyd building",
col = rgb(rgbImage[c("r.value", "g.value", "b.value")]),
asp = 1, pch = ".")
## ---- message= FALSE, echo=FALSE, eval=TRUE, message = FALSE, warning=FALSE----
kColors <- 5
kMeans <- kmeans(rgbImage[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbImage, main="Lloyd building",
col = clusterColour, asp = 1, pch = ".",
axes=FALSE, ylab="",
xlab="k-means cluster analysis of 5 colours")
# loading packages
library(jpeg)
require(RCurl)
require(cluster)
url <-"https://personal.utdallas.edu/~pxk180053/"
url <- paste(url, "YellowFlower-sRGB.jpg", sep="")
readImage <- readJPEG(getURLContent(url, binary=TRUE))
dm <- dim(readImage)
rgbImage <- data.frame(
x=rep(1:dm[2], each=dm[1]),
y=rep(dm[1]:1, dm[2]),
r.value=as.vector(readImage[,,1]),
g.value=as.vector(readImage[,,2]),
b.value=as.vector(readImage[,,3]))
url <-"https://personal.utdallas.edu/~pxk180053/"
url <- paste(url, "YellowFlower-sRGB.jpg", sep="")
readImage <- readJPEG(getURLContent(url, binary=TRUE))
#downloading the image, storing the values in dataframe and deleting the downloaded image
z <- tempfile()
url <-"https://personal.utdallas.edu/~pxk180053/YellowFlower-sRGB.jpg"
download.file(url,z,mode="wb")
original <- file.info(z)$size / 1000
pic <- readJPEG(z)
file.remove(z)
rm(z)
dm <- dim(pic)
#converting the image to RGB dataframe
rgbpic <- data.frame(
x=rep(1:dm[2], each=dm[1]),
y=rep(dm[1]:1, dm[2]),
r.value=as.vector(pic[,,1]),
g.value=as.vector(pic[,,2]),
b.value=as.vector(pic[,,3]))
View(rgbpic)
url <-"https://raw.githubusercontent.com/mages/diesunddas/"
url <- paste(url, "master/Blog/LloydsBuilding.jpg", sep="")
readImage <- readJPEG(getURLContent(url, binary=TRUE))
dm <- dim(readImage)
rgbImage <- data.frame(
x=rep(1:dm[2], each=dm[1]),
y=rep(dm[1]:1, dm[2]),
r.value=as.vector(readImage[,,1]),
g.value=as.vector(readImage[,,2]),
b.value=as.vector(readImage[,,3]))
View(rgbImage)
#downloading the image, storing the values in dataframe and deleting the downloaded image
z <- tempfile()
url <-"https://personal.utdallas.edu/~pxk180053/YellowFlower-sRGB.jpg"
download.file(url,z,mode="wb")
original <- file.info(z)$size / 1000
pic <- readJPEG(z)
file.remove(z)
rm(z)
dm <- dim(pic)
#converting the image to RGB dataframe
rgbpic <- data.frame(
x=rep(1:dm[2], each=dm[1]),
y=rep(dm[1]:1, dm[2]),
r.value=as.vector(pic[,,1]),
g.value=as.vector(pic[,,2]),
b.value=as.vector(pic[,,3]))
#plotting the image- Note: it may take some time to plot due to big size
plot(y ~ x, data=rgbpic, main="Flower",
col = rgb(rgbpic[c("r.value", "g.value", "b.value")]),
asp = 1, pch = ".")
View(rgbpic)
#storing each cluster data
n1 <- c()
for (i in 1:10) {
cl <- clara(rgbpic[, c("r.value", "g.value", "b.value")], i)
n1[i] <- cl$silinfo$avg.width
}
plot(n1, type = 'l',
main = "Optimal number of clusters for the flower",
xlab = "Number of clusters: k",
ylab = "Average silhouette distance",
col = "blue")
# We see that k=3 is the elbow point in the plot.
# therefore we chose no.of clusters, k=3
kColors <- 3
kMeans <- kmeans(rgbpic[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbpic, main="Flower with k means cluster analysis with 3 colors",
col = clusterColour, asp = 1, pch = ".")
kColors <- 4
kMeans <- kmeans(rgbpic[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbpic, main="Flower with k means cluster analysis with 3 colors",
col = clusterColour, asp = 1, pch = ".")
View(cl)
kColors <- 4
kMeans <- kmeans(rgbpic[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbpic, main="Flower with k means cluster analysis with 4 colors",
col = clusterColour, asp = 1, pch = ".")
kColors <- 5
kMeans <- kmeans(rgbpic[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbpic, main="Flower with k means cluster analysis with 5 colors",
col = clusterColour, asp = 1, pch = ".")
kColors <- 6
kMeans <- kmeans(rgbpic[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbpic, main="Flower with k means cluster analysis with 6 colors",
col = clusterColour, asp = 1, pch = ".")
kColors <- 7
kMeans <- kmeans(rgbpic[, c("r.value", "g.value", "b.value")],
centers = kColors)
clusterColour <- rgb(kMeans$centers[kMeans$cluster, ])
plot(y ~ x, data=rgbpic, main="Flower with k means cluster analysis with 7 colors",
col = clusterColour, asp = 1, pch = ".")
#PCA analysis on the same image
r <- pic[,,1]
g <- pic[,,2]
b <- pic[,,3]
#PCA analysis on each color vector
r.pca <- prcomp(r, center = FALSE)
g.pca <- prcomp(g, center = FALSE)
b.pca <- prcomp(b, center = FALSE)
#combining all PCA components of RGB to a list
rgb.pca <- list(r.pca, g.pca, b.pca)
rm(r,g,b,r.pca,g.pca,b.pca)
#taking different number of components, storing the images and checking the file compression percentage
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('compressed/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('compressed/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
setwd("C:/Users/Satyum/Desktop/Practical Aspects of DS/Week 7/Assignment 3")
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('compressed/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('C:/Users/Satyum/Desktop/Practical Aspects of DS/Week 7/Assignment 3/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('C:/Users/Satyum/Desktop/Practical Aspects of DS/Week 7/Assignment 3/compressed/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
#taking different number of components, storing the images and checking the file compression percentage
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('C:/Users/Satyum/Desktop/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('compressed/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
for (i in seq.int(3, round(nrow(pic) - 10), length.out = 10)) {
pca.img <- sapply(rgb.pca, function(j) {
compressed.img <- j$x[,1:i] %*% t(j$rotation[,1:i])
}, simplify = 'array')
filename <- paste('compressed/compressed_', round(i,0), '_flower.jpg', sep = '')
#writing image to disk
writeJPEG(pca.img, filename)
#printing compression percentage of each file with respect to original file
info <- file.info(full.path)$size / 1000
print(paste(filename, ' size: ', file.info(full.path)$size / 1000, '   original: ', original, '%   diff: ', round((file.info(full.path)$size / 1000 - original) / original, 2) * 100, '%', sep = ''))
}
